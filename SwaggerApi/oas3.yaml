openapi: 3.0.0
info:
  version: '1.0'
  title: "EasyLib OpenAPI 3.0"
  description: API for managing TutorMe.
  license:
    name: MIT
servers:
  - url: http://localhost:8000/api/v1
    description: Localhost
paths:
  /students:
    get:
      description: >-
        Ottiene una lista degli studenti iscritti al sito.
      responses:
        '200':
          description: 'Collection of students'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '404':
          description: 'Students not founded.'
    post:
      tags:
        - studente
      description: >-
        Creates a new student in the system.
      summary: Register a new student
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              unique:
                - email
                - password
                - username  
              properties:
                email:
                  type: string
                  description: 'Email address of the student'
                username:
                  type: string
                  description : 'Username of the student'
                password:
                  type: string
                  description: 'password of the student'
      responses:
        '201':
          description: 'Student created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created student.

  /Tutors:
    get:
      description: >-
        Gets the list of tutors.
      summary: View all the tutors.
      responses:
        '200':
          description: 'Collection of tutors'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tutor'
    post:
      tags:
        - tutor
      description: >-
        Create a new tutor.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              unique:
                - email
                - password
                - username  
              properties:
                email:
                  type: string
                  description: 'Email address of the tutor'
                username:
                  type: string
                  description : 'Username of the tutor'
                password:
                  type: string
                  description: 'password of the tutor'
      responses:
        '201':
          description: 'tutor created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created tutor.

  /Calendar:
    post:
      description: >-
        Creates a new booklending.
      summary: Borrow a book
      responses:
        '201':
          description: 'Booklending created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created booklending.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booklending'
          components:
  schemas:
    Student:
      type: object
      required:
        - id
        - email
        - password
        - username
      properties:
        id:
          type: integer
          description: 'ID of the Student'
        email:
          type: string
          description: 'Email address of the Student'
        password:
          type: string
          description: 'Password  of the Student'
        username:
          type: string
          description: 'Username of the Student'
    
    Student:
      type: object
      required:
        - id
        - email
        - password
        - username
      properties:
        id:
          type: integer
          description: 'ID of the Tutor'
        email:
          type: string
          description: 'Email address of the Tutor'
        password:
          type: string
          description: 'Password  of the Tutor'
        username:
          type: string
          description: 'Username of the Tutor'
    Event:
      type: object
      required:
        - title
        - author
        - ISBN
        - status
      properties:
        title:
          type: string
          description: 'Title of the book'
        author:
          type: string
          description: 'Author of the book'
        ISBN:
          type: string
          description: 'ISBN of the book'
        status:
          type: string
          enum: [available, lended]
          description: 'Tells whether the book is currently available or not'
    Calendar:
      type: object
      required:
      - student
      - book
      properties:
        user:
          type: string
          description: 'Link to the user'
        book:
          type: integer
          description: 'Link to the book'