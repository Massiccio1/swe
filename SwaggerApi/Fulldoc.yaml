openapi: 3.0.0
info:
  version: 1.0.0
  title: TutorMe API
  description: API for managing TutorMe.
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MASSIMOGIRARDELLI/TutorME/1.0.0
  - url: https://tutor-me.onrender.com/api/v1
    description: render hosted site
paths:
  /authentications:
    post:
      tags:
        - student
      description: returns a token in case email and password match the database
      summary: Log in a student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: status of the login and eventually the token
  /authentications_tutor:
    post:
      tags:
        - tutor
      description: returns a token in case email and password match the database
      summary: Log in a tutor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tutor'
      responses:
        '200':
          description: status of the login and eventually the token
  /students:
    get:
      tags:
        - student
      description: Ottiene una lista degli studenti iscritti al sito.
      responses:
        '200':
          description: Collection of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '404':
          description: Students not found.
    post:
      tags:
        - student
      description: Creates a new student in the system.
      summary: Register a new student
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of the student
                password:
                  type: string
                  description: password of the student
      responses:
        '201':
          description: Student created. Link in the Location header
          headers:
            Location:
              schema:
                type: string
              description: Link to the newly created student.
        default:
          description: Unexpected error
  /students/me:
    get:
      tags:
        - student
      parameters:
        - name: token
          in: query
          description: student token
          required: true
          schema:
            type: string
      description: return the info of the logged student
      responses:
        '200':
          description: Student sees all prenotations made
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
  /students/{id}:
    get:
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: ID of the student
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Checks the existance of the student and returns the email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
  /students/ban:
    post:
      tags:
        - student
      description: ban the student
      requestBody:
        content:
          application/json:
            schema:
              properties:
                isBanned:
                  type: boolean
      responses:
        '200':
          description: Success
  /prenotations:
    get:
      tags:
        - prenotation
      summary: Retrieve prenotations
      parameters:
        - in: query
          name: token
          description: Student token
          schema:
            type: string
      responses:
        '200':
          description: Successful response. Returns a list of prenotations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prenotation'
    post:
      tags:
        - prenotation
      summary: Create a new prenotation
      parameters:
        - in: query
          name: token
          description: Student token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prenotation'
      responses:
        '201':
          description: Prenotation created successfully
          headers:
            Location:
              schema:
                type: string
              description: URL of the created prenotation resource
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the reason for the bad request
  /prenotations/{id}:
    get:
      tags:
        - prenotation
      summary: Get a prenotation by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the prenotation to retrieve
        - in: query
          name: token
          description: Student token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  self:
                    type: string
                    description: URL of the prenotation resource.
                  course:
                    type: string
                    description: URL of the associated course resource.
                  tutor:
                    type: string
                    description: URL of the associated tutor resource.
                  student:
                    type: string
                    description: URL of the associated student resource.
                  timeslot:
                    type: string
                    description: URL of the associated timeslot resource.
        '400':
          description: Token doesn't match student or tutor
    delete:
      tags:
        - prenotation
      summary: Delete prenotation
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of prenotation to delete
      responses:
        '204':
          description: Prenotation deleted successfully
        '404':
          description: Prenotation not found
  /course:
    get:
      tags:
        - course
      summary: Retrieve courses
      responses:
        '200':
          description: Successful response. Returns an array of courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    self:
                      type: string
                      description: URL for accessing the course.
                    tutor:
                      type: string
                      description: URL for accessing the tutor associated with the course.
                    desc:
                      type: string
                      description: Course description.
                    price:
                      type: number
                      description: Course price.
  /course/{id}:
    get:
      tags:
        - course
      summary: Get a course by ID
      parameters:
        - in: path
          name: id
          description: ID of the course to retrieve.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response. Returns the course details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  self:
                    type: string
                    description: URL for accessing the course.
                  tutor:
                    type: string
                    description: URL for accessing the tutor associated with the course.
                  desc:
                    type: string
                    description: Course description.
                  price:
                    type: number
                    description: Course price.
        '402':
          description: Course not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the course does not exist.
        '406':
          description: Invalid course ID.
  /course/new:
    post:
      tags:
        - course
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                TutorId:
                  type: string
                  description: ID of the tutor associated with the course.
                desc:
                  type: string
                  description: Course description.
                price:
                  type: number
                  description: Course price.
      responses:
        '201':
          description: Successful response. Course created.
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the missing or invalid parameter.
        '401':
          description: Unauthorized. Token and course tutor do not match.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating a mismatch between the token and course tutor.
        '402':
          description: Tutor not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the tutor does not exist.
  /course/delete/{id}:
    delete:
      tags:
        - course
      summary: Delete a course
      parameters:
        - in: path
          name: id
          description: ID of the course to delete.
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successful response. Course deleted.
        '401':
          description: Unauthorized. Token and course tutor do not match.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating a mismatch between the token and course tutor.
        '405':
          description: Course not found.
        '406':
          description: Invalid course ID.
  /tutors:
    get:
      tags:
        - tutor
      description: Gets the list of tutors, requires token of tutor in the body
      summary: View all the tutors.
      responses:
        '200':
          description: Collection of tutors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tutor'
    post:
      tags:
        - tutor
      description: Create a new tutor.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tutor'
      responses:
        '201':
          description: tutor created. Link in the Location header
          headers:
            Location:
              schema:
                type: string
              description: Link to the newly created tutor.
  /tutors/me:
    get:
      tags:
          - tutor
      description: if I am logged as a tutor return my information
      parameters:
        - name: token
          in: query
          description: tutor token
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tutor'
    delete:
      tags:
        - tutor
      description: Delete a tutor if is logged-in
      parameters:
        - name: token
          in: query
          description: tutor token
          schema:
            type: string
      responses:
        '204':
          description: Tutor deleted.
  /tutors/{id}:
    get:
      tags:
        - tutor
      description: Get a tutor by his ID
      parameters:
        - name: id
          in: path
          description: ID of the tutor to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tutor'
  /tutors/me/slot:
    post:
      description: Enters a slot indicating its availability
      parameters:
        - name: token
          in: query
          description: tutor token
          required: true
          schema:
            type: string
      tags:
        - tutor
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - slot
              properties:
                slot:
                  type: array
                  description: Array of available slot to reserve this tutor
                  items:
                    type: integer
      responses:
        '200':
          description: "Success"
  /tutors/me/slot/{timeslot}:
    delete:
      description: Delete a slot
      tags:
        - tutor
      parameters:
        - name: timeslot
          in: path
          description: timeslot selected
          required: true
          schema:
            type: integer
        - name: token
          in: query
          description: tutor token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Slot deleted.
  /tutors/me/teaching-material:
    get:
      tags:
        - tutor
      responses:
        '200':
          description: Student created. Link in the Location header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeachingMaterial'
    post:
      responses:
        '200':
          description: html with the resources uploaded
      tags:
        - tutor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeachingMaterial'
  /status:
    get:
      tags:
        - tools
      responses:
        '200':
          description: status of server
          content:
            text/plain:
              schema:
                type: string
                example: pong
components:
  schemas:
    Student:
      type: object
      required:
        - id
        - email
        - password
        - isBanned
      properties:
        id:
          type: integer
          description: ID of the Student
        email:
          type: string
          description: Email address of the Student
        password:
          type: string
          description: Password of the Student
        isBanned:
          type: boolean
          default: false
    TeachingMaterial:
      type: object
      properties:
        CourseId:
          type: string
        name:
          type: string
        content:
          type: string
        materialType:
          type: string
          enum:
            - presentation
            - movie
            - article
    Tutor:
      type: object
      required:
        - id
        - email
        - password
        - name
        - desc
        - slot
      properties:
        id:
          type: integer
          description: ID of the Tutor, unique
        email:
          type: string
          description: Email address of the Tutor, unique
        password:
          type: string
          description: Password of the Tutor
        name:
          type: string
          description: Name and surname of the Tutor
        desc:
          type: string
          description: Tutor presentation
        slot:
          type: array
          description: Array of available slot to reserve this tutor
          items:
            type: integer
    Prenotation:
      type: object
      properties:
        CourseId: 
          type: string
        TutorId:
          type: string
        StudentId: 
          type: string
        timeslot:
          type: number